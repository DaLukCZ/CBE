<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAHRSUgA5HRgAOR4ZADwgGgBDNToBPCAbJz8iHWk+IBqpQCMd1kQl
        H+9FJyH8Rich/EYqJe9DJiDVRSgiqEgrJ2hPLysm////AUstKQBwUFAAYEE/AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4HRgAOx4YADkeGAAdFBQBOh4YNT4gGpRGKSLdSSoj+2ZN
        R/9lSkP/YDsx/2hLQ/9xUUn/eWdi/1UxKP9MJhz/Syoj+000L91GKiWTUDIuMv///wBSNDEAPiIdAIVi
        ZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOBwXACgRDAA7HxkAOB0YFzseF4ZEJh/pUjEp/3xi
        W/9rRTv/kHNr/4NnX/98UkT/i2tf/4pkV/+JbWT/ZzUm/2MuIP9+W1H/j4SB/1pAOv9FJh/nSCsnglg6
        OBVCJiEA////AH1bXAAAAAAAAAAAAAAAAAAAAAAAAAAAADUaFAAyGRMAPR8ZADccFjI9Hhe/UjQt/3Rb
        Vf9/ZF3/h2dc/4BgSv9+TD7/iF9i/4RKTf+VW1n/jlJR/4NPVP96R0P/cTwl/4VkTP+VenD/dlFG/3ph
        W/9KKSH/QyUgu00wLC02GhQApoCGAIBdXgAAAAAAAAAAAAAAAAAzGRMAIw0IAD8iGwA4HRc9Rigi12RH
        QP9sRjz/k3du/4NbT/9vUTL/fF9R/21WVP+DTpD/jFKJ/4dMdf+MVXv/g0qM/4BWhf9qV0b/eF1F/29H
        LP+HXlP/hWVc/2U9Mv9lSUL/RCYg00wvKzgzGBEA////AI5qbQAAAAAAPyQfADwgGgA7HxkAOB0XMkAg
        GddhPzb/iG5n/4JaTP98Rz7/iFJ9/2pbVP9zTVP/T0sl/0xDI/9qTED/VTAf/2hJOv9XPS//SFIe/1tC
        Nf9xW1H/d1Zu/4ZSa/98RTT/lXZs/3BKQP9MJhz/RSYg1FI0MS5FKCMAOh4YAAAAAAA3HBYAOR0YADYc
        Fxc/IRq/Ticd/2QzJf+CU0P/lmFc/5ZSif92TXr/Sk8i/2RTM/9dPyr/WGUk/2tXOv9dNSj/b09B/1hZ
        If9dXy3/XTcn/1tfLP9TRDr/h1KP/5hVd/+IUT7/bzgn/14uIP9LJh3/RSciu1c5NxRVNjQAdFNTADUb
        FQADAAABPSAZhkomHf9eLiH/bjkp/39GTv+YV4r/bkFM/2tOP/9UViH/aWI4/2pHP/9uXTX/XGUl/2VC
        Nv9mWTr/Xmsi/29SQf9tTkH/WWMk/2JTNP9mQzn/gk1t/5RSfv93RDz/bDUk/1stIP9IJR3/Ryolf///
        /wCDYGIAOx8ZADkeGDVEIxvpWCsf/2w0I/98REL/ilOa/2pEWv9qTTv/YTsu/2ZgNv9kYiT/d1VJ/3tV
        RP9wcCz/am9L/2J1M/96YjP/dFRM/3dWPf9ZZh7/bFM+/187K/9sUUT/dEN4/4pVhf91Oyv/aTMj/1Qq
        Hv9FJh/nUzYzMUwvKwAKBggBPiAZlE0mG/9kMSL/ekcs/4pVbP9zVm3/Ujgl/2xJNf90UUX/Z1ZB/2Vy
        Kf+EWD3/gFlN/45oPv9riTj/eH42/41fRf99WE3/gWM2/11sLP9sTUT/eFZG/147J/9YRDf/g1iC/4VT
        TP90Pif/YS8g/0olG/9IKiWQ////ADgbFCdEKSbdW0pV/2k6J/9wUzr/bV5O/05UG/9KVhb/UFgW/2Ng
        JP9pZDz/ZYAz/5JsQf+PYlL/mmpO/3uNOP+KfUD/l2hU/5RkUP+Bdzf/ZXk9/2deMf9dXx7/S1YV/0tW
        GP9VVSf/d2BX/2tHJv9qOzD/V0hT/0YoI9taOzklOx4YaUosKPtkVGP/cEY4/2taU/9tVlb/bE08/2FE
        Mv9lVDz/ZVgm/3N2Lf9riiv/eYgx/5KASf+Xg0//iJtB/4mVRP+bf1L/i4NC/2+MK/9whS//bmgm/2VX
        Mf9jTTn/ZUU0/21RQ/9tWF//bFVE/3BCOf9gUmD/SCgh+0wvK2U+IRqpTygd/2cxH/97QkD/fVuD/0hY
        IP9dUSX/e1VA/3lSRf98WVD/kGNP/5B5Q/9/mDj/k5hN/5GxVv+esWH/l7Vc/5KoVf+Plkb/fZE2/5hv
        TP+GXU//eVZN/3tTQ/9zVDn/TlIa/1ZaQf+HVX//czoo/2QvIP9MJx3/SSsnpz8gGdZRKBz/ZzMh/41O
        Wf+ES3z/Y1I5/1RkI/9eZB3/hWQ4/5BeQv+RZlH/nXZV/42dSP+qpWv/r8iF/8XcqP+81pv/q7h5/56g
        XP+RkUr/mm1W/5BjTf+OXj7/eWQw/1JiG/9bXjD/aUtH/5FOiP+ARzf/ZzEh/08nHP9FJyHVWkpG73Fe
        Wf9iST//iWR3/4Beef9ZQzr/b2BX/2NuRv9bYzX/c2Q9/4h0Yf+Ab1r/hpVk/5uwgP+nsJr/xsbG/7a4
        s/+Xo4n/epBe/3V8Tv9+cV7/dWZO/2hpNP9ebzz/WFZB/1hCO/9YR0L/gmmA/3RcV/9lSUH/VT03/1NE
        QeyHfn38iIB+/2JIQP+roaf/j4OF/3JkXf+Ke3H/j4J6/4SEev+Nmn7/nKOU/4CMc/+EnmP/o6yY/7Ky
        s/+qqqr/srKy/7e4t/+apYv/oamY/2+GVv9beTj/hY98/4V8bv+VioX/k42L/3hzcP+Ig4j/YVBM/5+b
        mv+ioaD/kI2N+WdZVvx7bWr/aFFJ/4pugv+Ea3z/Y09F/3ptY/9zgVj/aXhT/4V5b/9yZVX/hXxe/4ud
        b/+aq4X/s7eu/9LR0//Dw8T/p62f/3+UZ/+BimT/fXVc/21iQ/9+f27/UWQn/3FxW/9+eHb/a2Fc/4Jy
        gf9lUVD/gnJt/2tXUv90a2n6QSIb71IrIf9nNSP/klRp/39MaP9PNBv/SlkY/1VqJ/9qVDn/f082/45c
        P/+cc1T/f5xB/56vYv+70Jz/3enN/9DgvP+wwof/iKNH/4mNSv+ZZ03/ilg9/25KN/9cWjL/TGYh/0dJ
        If9UMyf/kViD/35HQP9gLyD/Tycd/0AjHe1BIhvWVCof/243JP+WWF3/flNn/0pWF/9qaTr/fFc+/4xa
        Pv+UZEf/l2pU/5x+VP+DoUH/nqlf/6PDc/+1voH/rMN8/6K7bv+So1H/iplG/51xVv+WaVH/kWBC/4dX
        Pf92XED/WmQs/1FOIv+XW4L/h008/2kzIv9QKB7/Rigi1j8hG6lQKB3/aDEg/3pCOP9pVVX/TDgh/2U8
        K/98Vz3/dlk7/29nQf90fkT/dJE2/32UN/+YkVv/oJ5d/6GgXf+aplf/o5Zi/4+RTv91ljH/dok7/3J3
        R/9vXjz/e1s//3ZON/9ZNiX/T0Mv/3VUVv91Oyn/ZDAg/0wnHf9GKSSoPB8YaUorJvtkT1n/cEU2/21V
        Xf9UUTv/V2Eq/1VnK/9VZyj/am0r/4FwNv9sfSn/jndJ/6NzW/+ifVr/f5s//4yRTP+neFz/oHFY/3p/
        Of91dCz/fXI2/19oJv9TZyr/WGcs/1JaKf9fUVH/b1FK/29BNf9gTVj/SCcg+0cqJmc5HBUnRSoo3VxQ
        X/9sOSr/gEpI/39Tcf9WPyL/alM7/3hUO/+HWD3/eFU7/2JvI/+VaUT/lGhU/5tvUf91jzT/i4FE/5ls
        Vv+XZ0//g2w2/2JnKf+DVT//glU5/3RXQf9gSi7/XUM1/4pWef93Py7/ajwz/1hNW/9FJyPdUDMvJxMP
        FAE/IBqUTiYb/2QwIf9/RzP/nFp+/3tSav9dPi//bEUy/3ZTRf9jXD7/anEs/4lZP/+BW1D/iXE9/258
        Of9yhTb/imRF/39ZTP+IYzr/W3As/2tRQ/94VUT/YToo/2NHQP+NVYL/llhh/3Y9KP9hLyD/SyUb/0Qm
        IZTfwtYBPCAaADsfGTVEIxzpWCwg/2w1Iv9+REL/ik+Y/2JCUv9sTz//YTsv/11gMf9pXib/eVRH/3JS
        QP9dZBj/c1tC/2NpMv9lXCD/dFVN/3xVPv9ZYx7/ZFE5/2I/MP9pT0L/bUNw/41Qhv93PSv/ajQj/1Uq
        H/9EJB3pSSwoNEQnIgA5HhgAEQsNAT4hGoZLJh3/Xy4h/286Kf9/TFj/kVOR/2o/Rv9qTTv/VVwi/2xc
        OP9qRz7/WVko/1xhHf90U0b/clhA/1ZjGf9iTzb/cU9E/1tdI/9jWzX/Y0Ey/3xIav+QU4n/eUhC/2w1
        JP9cLSD/SCUd/0MmIIbevtABYkNCADofGQA7HxoAOR4ZF0EiG79PKB7/ZDEj/31OP/+MWl7/mlmH/3dM
        cP9JUiD/aFQ6/1M9Hf9IVhP/bU0y/29OQP91U0T/X08k/0lUFv9dOyj/X14y/1FINP+KU4X/nVx8/4FH
        OP9tNCL/YC8h/0wnHf9CJB6/Si4qF0gsJwBZOzgAMRcQAD0hGwA9IBoAOx8aMkEhGtdcOC7/im9n/35Z
        TP98RkD/iFKE/2dbWP9qSkv/SVIe/04+Jf9lSDv/ZkUx/2tNOv9ZOi7/TE4m/1FJJv9sU1P/dFlw/4dM
        bv97QS7/gFlL/2Y+M/9OKB//QiMc10MnIzI+IhwANRoUAMqfpwAAAAAAOB0WAC8YEwA/IhsAOh4ZPUUn
        INdjR0D/b0c8/5ByaP97Vkv/bUw2/3VgTv+AVWv/gUmN/4FRhv+ESnP/hU97/31PiP+GTIz/el1W/3RZ
        SP9uRC//e05B/2xBNf98WU//dV5Z/0IkHtdAJB89NhoTAJBucgB1VFQAAAAAAAAAAAAAAAAAOR0XADQb
        FgA+IBoAOh4YMj8fGL9XNi7/gGRd/4hoX/+IZVj/fFlH/3xIPv9+VmD/gEZR/49QW/+LTVj/f01Z/3xH
        SP96Pyz/iWRR/4VqYf94U0j/hHJt/1M2L/9EJiC/PiEcMjcbFABeQD4AWjs5AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAOR0XAC4XEgA9IBoAOB4ZFzweGIZIKCHpWjcv/3xjXf9sRjv/knhw/3hZT/93SDn/dkk5/4xq
        Xf93VEj/aDIi/2UwIP+IaGD/lISA/1o9Nv9RNi/pQCUghjseGRc7HxkAcVJUAFY4NQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAANhwVAD0gGwA6HxkAEQsMATgcFjU9IBmUSy4n3VAvJ/t0XFb/ZUc//3tf
        V/9yVk//h25o/3FXUf9SKh//TScd/08vJ/tQNC7dPiEblDgbFjUuDwwBPSEcADUZEwBXOTYAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANRoUADkdFwA3HBYAOx8ZAAsEBAE0GBMnOh0XaT0f
        GalCJB3WSy4n70otJ/xKLCX8SSwm7z8hG9Y9IBmpOh4YaTMXESctHyEBPCAaAD8kHwA9IhwAkm5yAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA+AAAP/AAAA/gAAAHwAAAA4AAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgAAAAcAAAAPgAAAH8AAAD/gAAB8=
</value>
  </data>
</root>